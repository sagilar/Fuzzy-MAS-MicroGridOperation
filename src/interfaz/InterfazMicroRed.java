/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import agentes.AgenteInterfaz;
import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYDataset;
import org.json.JSONArray;
import org.json.JSONObject;
import paquetedbs.DAO;
import paquetedbs.PostgreSQLDAO;

/**
 *
 * @author Santiago
 */
public class InterfazMicroRed extends javax.swing.JFrame {

    DAO baseDeDatos = null;
    Connection conDB = null;
    ResultSet rs;
    XYDataset dataset;
    DBDataset dbset;
    JFreeChart chart;
    ChartPanel chartPanel;
    Statement stmt = null;
    DatabaseMetaData dbmd = null;
    PreparedStatement pstmt = null;
    Map grafica = new HashMap();
    Map datosRecomendacion = new HashMap();
    Map datosRecomendacionSem = new HashMap();

    boolean flagConexion = false;
    double potenciaGenerada = 0;
    double demandaPotencia = 0;
    double potenciaAlmacenada = 0;
    int modoOperacion = 0;
    boolean flancoEstado0 = true;
    boolean flancoEstado1 = false;
    boolean flancoEstado2 = false;
    boolean flancoEstado3 = false;
    boolean flancoEstado4 = false;
    boolean flancoEstado5 = false;
    JSpinner timeSpinner = new JSpinner(new SpinnerDateModel());

    public InterfazMicroRed() {

        initComponents();

        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinner, "HH:mm:ss");
        timeSpinner.setEditor(timeEditor);
        timeSpinner.setValue(new Date()); // will only show the current time
        //timeSpinner.setSize(130, 35);
        //jPanel1.add(timeSpinner,new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 130, 30));

        baseDeDatos = new PostgreSQLDAO("pruebas", "5432");
        String urlDB = baseDeDatos.getUrl();
        initComponents();
        conDB = baseDeDatos.conectar(urlDB, "SantiagoGil", "adminpass");
        crearGrafica();
        actualizarValores();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Smartgrid Interface");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel1.setText("Smart Grid Interface");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 19, 320, 40));

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel3.setText("Date:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 590, -1, 30));

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel4.setText("Valor");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 560, -1, 30));

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel5.setText("Precio");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 590, -1, 30));

        //jLabel2.setVisible(false);
        jLabel2.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel2.setText("-");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 210, 60, 30));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 670, 400));

        jButton1.setVisible(false);
        jButton1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jButton1.setText("Integrate with Matlab");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 610, 180, 30));

        jButton2.setVisible(false);
        jButton2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jButton2.setText("Request recommendations");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 50, 180, 30));

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel6.setText("Last price:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 560, -1, 30));

        //jLabel8.setVisible(false);
        jLabel8.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel8.setText("Recommendation based on 1-week prices:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 210, -1, 30));

        //jLabel9.setVisible(false);
        jLabel9.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel9.setText("Recommendation based on 1-day prices:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 170, -1, 30));

        //jLabel10.setVisible(false);
        jLabel10.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel10.setText("-");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 170, 60, 30));

        //jLabel7.setVisible(false);
        jLabel7.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel7.setText("power at the following hours:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 120, -1, 30));

        //jLabel12.setVisible(false);
        jLabel12.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel12.setText("Avoid to consume power at the following hours:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 280, -1, 30));

        //jLabel13.setVisible(false);
        jLabel13.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel13.setText("Most expensive based on 1-week prices:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 370, -1, 30));

        //jLabel14.setVisible(false);
        jLabel14.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel14.setText("Most expensive based 1-day prices:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 330, -1, 30));

        //jLabel15.setVisible(false);
        jLabel15.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel15.setText("-");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 370, 60, 30));

        //jLabel17.setVisible(false);
        jLabel17.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel17.setText("-");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 330, 60, 30));

        //jLabel16.setVisible(false);
        jLabel16.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel16.setText("Current generated power: ");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 480, -1, 30));

        //jLabel18.setVisible(false);
        jLabel18.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 480, 150, 20));

        //jLabel19.setVisible(false);
        jLabel19.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel19.setText("Current demand power:");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 520, -1, 30));

        jLabel20.setVisible(false);
        jLabel20.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel20.setText("Operation modes:");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 600, -1, 30));

        //jLabel21.setVisible(false);
        jLabel21.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 520, 150, 20));

        jLabel22.setVisible(false);
        jLabel22.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel22.setText(String.valueOf(modoOperacion));
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 600, 130, 20));

        //jLabel24.setVisible(false);
        jLabel24.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel24.setText("kW");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 480, 60, 20));

        //jLabel25.setVisible(false);
        jLabel25.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel25.setText("kWh");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 560, 60, 20));

        //jLabel19.setVisible(false);
        jLabel23.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel23.setText("Stored energy:");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 560, -1, 30));

        //jLabel21.setVisible(false);
        jLabel26.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 560, 150, 20));

        //jLabel25.setVisible(false);
        jLabel27.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel27.setText("kW");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 520, 60, 20));

        //jLabel7.setVisible(false);
        jLabel11.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel11.setText("It is recommended to consume");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 90, -1, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1437, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 662, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //inferirRecomendacionesDia();
        //inferirRecomendacionesSemana();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        //actualizarRecomendaciones();
    }//GEN-LAST:event_jButton2MouseClicked

    private void crearGrafica() {
        try {
            dbset = new DBDataset(conDB);
            chart = createChart(dbset);
            chartPanel = new ChartPanel(chart);
            chartPanel.setLayout(null);
            chartPanel.setPreferredSize(new java.awt.Dimension(jPanel2.getSize()));
            chartPanel.setMouseZoomable(true, false);
            chartPanel.setDomainZoomable(true);
            //setContentPane( chartPanel );
            jPanel2.setLayout(new java.awt.FlowLayout());
            jPanel2.add(chartPanel, BorderLayout.CENTER);
            jPanel2.validate();
        } catch (SQLException ex) {
            Logger.getLogger(InterfazMicroRed.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private JFreeChart createChart(final XYDataset dataset) {
        return ChartFactory.createTimeSeriesChart(
                "Energy price",
                "Time",
                "Price [cUSD]",
                dataset,
                false,
                false,
                false);
    }

    public void llamarGrafica(ResultSet result) {
        try {
            dbset.setResultSet(result);
            jPanel2.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(InterfazMicroRed.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void actualizarValores() {
        String fechaActual = getFechaActual();
        String fechaSA = getFechaSemanaAntes();
        try {
            String uri = "https://hourlypricing.comed.com/api?type=5minutefeed&datestart=" + fechaSA + "&dateend=" + fechaActual;

            URL obj = new URL(uri);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");
            String responseEncode = con.getContentEncoding();
            String respuesta = "";

            //Socket socket=new Socket(urlComplete,80);
            try {
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);

                }
                in.close();
                respuesta = response.toString();

                respuesta = respuesta.replace("\"", "");
                String respuestaArray = respuesta;
                respuesta = respuesta.replace("[", "");
                respuesta = respuesta.replace("]", "");

                JSONArray jsonArray = new JSONArray(respuestaArray);

                String timeSAux, priceSAux;
                double priceAux = 0.0;
                long timeAux = 0;
                Timestamp fechahoraaux;
                JSONObject jsonObject;
                for (int i = 0; i < jsonArray.length(); i++) {
                    jsonObject = jsonArray.getJSONObject(i);
                    /*System.out.println(jsonObject);
                        System.out.println(jsonObject.toMap());
                        //timeSAux = jsonObject.toMap().get("millisUTC").toString();
                        timeSAux = jsonObject.get("millisUTC").toString();
                        System.out.println(timeSAux);
                                priceSAux = jsonObject.get("price").toString();
                                System.out.println(jsonObject.get("price"));
                                try{
                                    priceAux = Math.abs(Double.parseDouble(priceStr));
                                }catch(Exception ef)
                                {
                                    
                                
                                }
                                try{
                                    timeAux = Long.parseLong(timeStr);
                                }catch(Exception ef2)
                                {
                                    
                                
                                }*/
                    timeAux = jsonObject.getLong("millisUTC");
                    priceAux = Math.abs(jsonObject.getDouble("price"));
                    boolean flagGuarda = true;
                    if (priceAux < 1.1) {
                        flagGuarda = false;
                    }

                    fechahoraaux = new Timestamp(timeAux);

                    if (flagGuarda) {
                        almacenarDB(fechahoraaux, priceAux);
                    }

                }


                /*timeStr = jsonObject.toMap().get("millisUTC").toString();
                priceStr = jsonObject.toMap().get("price").toString();
                price = Double.parseDouble(priceStr);
                timeMilis = Long.parseLong(timeStr);*/
                //almacenarDB(fechahora, price);
            } catch (Exception e) {
                Logger.getLogger(InterfazMicroRed.class.getName()).log(Level.SEVERE, null, e);
            }

        } catch (MalformedURLException ex) {
            Logger.getLogger(InterfazMicroRed.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(InterfazMicroRed.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazMicroRed.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private class DBDataset extends var.JDBCXYDataset {

        public DBDataset(Connection connection, ResultSet results) throws SQLException {
            super(connection, results);
        }

        public DBDataset(Connection connection) throws SQLException {
            super(connection);
        }

    }

    private void almacenarDB(Timestamp tiempo, double precio) {

        String st;
        try {

            st = "INSERT INTO precioenergia VALUES (?,?)";
            pstmt = conDB.prepareStatement(st);
            pstmt.setTimestamp(1, tiempo);
            pstmt.setDouble(2, precio);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            /*try {
                st = "UPDATE precioenergia SET timest = ?, valorprecio = ? WHERE timest = ?";
                pstmt = conDB.prepareStatement(st);
                pstmt.setTimestamp(1, tiempo);
                pstmt.setDouble(2, precio);
                pstmt.setTimestamp(3, tiempo);
                pstmt.executeUpdate();

                //Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex1) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex1);
            }*/
            //Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private String getFechaActual() {
        java.util.Calendar calendario;
        int dia, mes, año;
        int hora, minutos, segundos;
        calendario = new java.util.GregorianCalendar();
        java.util.Date actual = new java.util.Date();
        calendario.setTime(actual);
//dia = calendario.get(Calendar.DAY_OF_MONTH); 
//mes = (calendario.get(Calendar.MONTH) + 1); 
//año = calendario.get(Calendar.YEAR); 
        dia = calendario.get(Calendar.DAY_OF_MONTH);
        mes = (calendario.get(Calendar.MONTH) + 1);
        año = calendario.get(Calendar.YEAR);
        hora = calendario.get(Calendar.HOUR_OF_DAY);
        minutos = calendario.get(Calendar.MINUTE);
//String hour = String.format("%02d : %02d : %02d", hora, minutos, segundos); 
        String date = String.format("%04d%02d%02d%02d%02d", año, mes, dia, hora, minutos);

        return date;
    }

    private String getFechaSemanaAntes() {
        java.util.Calendar calendario;
        int dia, mes, año;
        int hora, minutos, segundos;
        calendario = new java.util.GregorianCalendar();
        java.util.Date actual = new java.util.Date();
        calendario.setTime(actual);
        calendario.add(Calendar.DAY_OF_MONTH, -7);
//dia = calendario.get(Calendar.DAY_OF_MONTH); 
//mes = (calendario.get(Calendar.MONTH) + 1); 
//año = calendario.get(Calendar.YEAR); 
        dia = calendario.get(Calendar.DAY_OF_MONTH);
        mes = (calendario.get(Calendar.MONTH) + 1);
        año = calendario.get(Calendar.YEAR);

//String hour = String.format("%02d : %02d : %02d", hora, minutos, segundos); 
        String date = String.format("%04d%02d%02d", año, mes, dia);
        date = date + "0000";

        return date;
    }

    private String getHora() {
        java.util.Calendar calendario;
        int hora, minutos, segundos;
        calendario = new java.util.GregorianCalendar();
        segundos = calendario.get(Calendar.SECOND);
        java.util.Date actual = new java.util.Date();
        calendario.setTime(actual);
//dia = calendario.get(Calendar.DAY_OF_MONTH); 
//mes = (calendario.get(Calendar.MONTH) + 1); 
//año = calendario.get(Calendar.YEAR); 
        hora = calendario.get(Calendar.HOUR_OF_DAY);
        minutos = calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND);
        String hour = String.format("%02d:%02d:%02d", hora, minutos, segundos);
        return hour;
    }

    public Connection getConexion() {
        return conDB;
    }

    public void actualizarRecomendaciones(String d, String s) {

    }
    
   


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel14;
    public javax.swing.JLabel jLabel15;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    public javax.swing.JLabel jLabel18;
    public javax.swing.JLabel jLabel19;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel20;
    public javax.swing.JLabel jLabel21;
    public javax.swing.JLabel jLabel22;
    public javax.swing.JLabel jLabel23;
    public javax.swing.JLabel jLabel24;
    public javax.swing.JLabel jLabel25;
    public javax.swing.JLabel jLabel26;
    public javax.swing.JLabel jLabel27;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables



}
