// file: ProyectoSMAOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package proyectosma.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: ProyectoSMAOntology.java
 * @author ontology bean generator
 * @version 2017/11/12, 21:55:08
 */
public class ProyectoSMAOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "proyectoSMA";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new ProyectoSMAOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ENVIARPRECIO_INFOPRECIO="infoPrecio";
    public static final String ENVIARPRECIO="EnviarPrecio";
    public static final String ENVIARCONEXION_CONEXIONDB="conexionDB";
    public static final String ENVIARCONEXION="EnviarConexion";
    public static final String ENVIARINFOOPERACION_PARAMETROS="parametros";
    public static final String ENVIARINFOOPERACION="EnviarInfoOperacion";
    public static final String PRECIO_HORA="hora";
    public static final String PRECIO_VALOR="valor";
    public static final String PRECIO="Precio";
    public static final String OPERACION_MODOOPERACIONALMACENAMIENTO="modoOperacionAlmacenamiento";
    public static final String OPERACION_MODOOPERACIONEXTERNO="modoOperacionExterno";
    public static final String OPERACION_POTENCIAALMACENADA="potenciaAlmacenada";
    public static final String OPERACION_ESTADOFALLAMICRORED="estadoFallaMicroRed";
    public static final String OPERACION_MODOOPERACIONVENTA="modoOperacionVenta";
    public static final String OPERACION_MODOOPERACIONAPAGADO="modoOperacionApagado";
    public static final String OPERACION_ACEPTADO="aceptado";
    public static final String OPERACION_POTENCIAGENERADA="potenciaGenerada";
    public static final String OPERACION_ESTADOFALLAREDEXTERNA="estadoFallaRedExterna";
    public static final String OPERACION_MODOOPERACIONINTERNO="modoOperacionInterno";
    public static final String OPERACION_MODOOPERACIONPARCIAL="modoOperacionParcial";
    public static final String OPERACION_POTENCIADEMANDA="potenciaDemanda";
    public static final String OPERACION="Operacion";
    public static final String CONEXION="Conexion";

  /**
   * Constructor
  */
  private ProyectoSMAOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema conexionSchema = new ConceptSchema(CONEXION);
    add(conexionSchema, proyectosma.ontology.Conexion.class);
    ConceptSchema operacionSchema = new ConceptSchema(OPERACION);
    add(operacionSchema, proyectosma.ontology.Operacion.class);
    ConceptSchema precioSchema = new ConceptSchema(PRECIO);
    add(precioSchema, proyectosma.ontology.Precio.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema enviarInfoOperacionSchema = new PredicateSchema(ENVIARINFOOPERACION);
    add(enviarInfoOperacionSchema, proyectosma.ontology.EnviarInfoOperacion.class);
    PredicateSchema enviarConexionSchema = new PredicateSchema(ENVIARCONEXION);
    add(enviarConexionSchema, proyectosma.ontology.EnviarConexion.class);
    PredicateSchema enviarPrecioSchema = new PredicateSchema(ENVIARPRECIO);
    add(enviarPrecioSchema, proyectosma.ontology.EnviarPrecio.class);


    // adding fields
    operacionSchema.add(OPERACION_POTENCIADEMANDA, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_MODOOPERACIONPARCIAL, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_MODOOPERACIONINTERNO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_ESTADOFALLAREDEXTERNA, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_POTENCIAGENERADA, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_ACEPTADO, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_MODOOPERACIONAPAGADO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_MODOOPERACIONVENTA, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_ESTADOFALLAMICRORED, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_POTENCIAALMACENADA, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_MODOOPERACIONEXTERNO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    operacionSchema.add(OPERACION_MODOOPERACIONALMACENAMIENTO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    precioSchema.add(PRECIO_VALOR, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    precioSchema.add(PRECIO_HORA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    enviarInfoOperacionSchema.add(ENVIARINFOOPERACION_PARAMETROS, operacionSchema, ObjectSchema.OPTIONAL);
    enviarConexionSchema.add(ENVIARCONEXION_CONEXIONDB, conexionSchema, ObjectSchema.OPTIONAL);
    enviarPrecioSchema.add(ENVIARPRECIO_INFOPRECIO, precioSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
